/**
* This file is generated by a tool. Do not edit directly.
* Generated by openapi-angular-generator.
*/
import { HttpResponse } from "@angular/common/http";
import { Observable, tap } from "rxjs";

/** Triggers a browser file download by creating a temporary anchor element. */
export function downloadFile(blob: Blob, filename: string): void {

    // Create a URL for the blob object
    const url = window.URL.createObjectURL(blob);

    // Create a temporary anchor element and set its properties
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;

    // Append to body, click, and then remove
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    // Clean up by revoking the object URL
    window.URL.revokeObjectURL(url);
}

/** An RxJS pipeable operator to automatically trigger a file download. */
/** @param fallbackFilename - The filename to use if one cannot be extracted from the 'Content-Disposition' header. */
export function downloadFileOperator<T extends Blob | HttpResponse<Blob>>(fallbackFilename: string): (source: Observable<T>) => Observable<T> {

    return (source: Observable<T>) => {
        return source.pipe(
            tap((response: T) => {
                // --- START FIX ---
                const blob = response instanceof HttpResponse ? response.body : response;
                if (!blob) {
                    console.error('Download failed: Blob is null or undefined.');
                    return;
                }

                const contentDisposition = response instanceof HttpResponse ? response.headers.get('content-disposition') : null;
                const filename = extractFilenameFromContentDisposition(contentDisposition) ?? fallbackFilename;

                downloadFile(blob, filename);
                // --- END FIX ---
            })
        );
    };
}

/** Extracts a filename from a 'Content-Disposition' header string. */
export function extractFilenameFromContentDisposition(contentDisposition: string | null): string | null {

    if (!contentDisposition) {
        return null;
    }

    // Regex to find filename="some-file.ext" or filename*=UTF-8''some-file.ext
    const filenameMatch = contentDisposition.match(/filename\*?=['"]?([^'"\n;]+)['"]?/i);

    if (!filenameMatch || !filenameMatch[1]) {
        return null;
    }

    const filename = filenameMatch[1];

    // Handle RFC 5987 encoding (filename*=UTF-8''...)
    if (filename.toLowerCase().startsWith("utf-8''")) {
        try {
            return decodeURIComponent(filename.substring(7));
        } catch {
            // Fallback to the raw value if decoding fails
            return filename.substring(7);
        }
    }

    // Return the simple filename="value"
    return filename;
}
