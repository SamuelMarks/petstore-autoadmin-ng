/**
* This file is generated by a tool. Do not edit directly.
* Generated by openapi-angular-generator.
*/
import { HttpContextToken, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from "@angular/common/http";
import { inject, Injectable } from "@angular/core";
import { Observable } from "rxjs";
import { CLIENT_CONTEXT_TOKEN_DEFAULT, HTTP_INTERCEPTORS_DEFAULT } from "../tokens";

/** Base HttpInterceptor for the Default client. */
/** It checks for a client-specific context token on each request and, if present, */
/** applies all interceptors provided via the HTTP_INTERCEPTORS_DEFAULT token. */
@Injectable
export class DefaultBaseInterceptor implements HttpInterceptor {
    private readonly httpInterceptors: HttpInterceptor[] = inject(HTTP_INTERCEPTORS_DEFAULT);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_DEFAULT;

    intercept(req: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {

        // If the request context does not have our client token, pass it through without modification.
        if (!req.context.has(this.clientContextToken)) {
            return next.handle(req);
        }

        // This request belongs to our client.
        // We create a new handler that chains all of our client-specific interceptors.
        // `reduceRight` is used to apply interceptors in the correct order (first in, last out).
        const handler: HttpHandler = this.httpInterceptors.reduceRight(
            (nextHandler, interceptor) => ({
                handle: (request: HttpRequest<unknown>) => interceptor.intercept(request, nextHandler),
            }),
            next // The final handler in the chain is the original `next` handler.
        );

        // Pass the request to our newly constructed handler chain.
        return handler.handle(req);
    }
}
