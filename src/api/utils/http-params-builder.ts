/**
 * This file is generated by a tool. Do not edit directly.
 * Generated by openapi-angular-generator.
 */
import { HttpParams } from "@angular/common/http";

/** A utility class for building HttpParams recursively from complex objects. */
export class HttpParamsBuilder {
  /** Public entry point to add a value to HttpParams. It delegates to the recursive handler. */
  public static addToHttpParams(httpParams: HttpParams, value: unknown, key: string): HttpParams {

    if (value == null) {
      return httpParams;
    }

    const isDate = value instanceof Date;
    const isObject = typeof value === 'object' && !isDate;

    if (isObject) {
      return this.addFromObject(httpParams, value as Record<string, unknown>, key);
    }

    // For primitives, dates, and other types
    return httpParams.append(key, this.formatValue(value));
  }

  /** Recursively processes an object or array. */
  private static addFromObject(httpParams: HttpParams, obj: Record<string, unknown> | unknown[], prefix: string): HttpParams {

    if (Array.isArray(obj)) {
      // For arrays, append each item under the same key.
      // e.g., { ids: [1, 2] } becomes 'ids=1&ids=2'
      for (const value of obj) {
        if (value != null) {
          httpParams = this.addToHttpParams(httpParams, value, prefix);
        }
      }
    } else {
      // For objects, iterate over keys and build nested keys.
      // e.g., { filter: { name: 'test' } } becomes 'filter.name=test'
      for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          const value = (obj as Record<string, unknown>)[key];
          if (value != null) {
            const newPrefix = prefix ? `${prefix}.${key}` : key;
            httpParams = this.addToHttpParams(httpParams, value, newPrefix);
          }
        }
      }
    }
    return httpParams;
  }

  /** Formats a value into a string suitable for URL parameters. */
  private static formatValue(value: unknown): string {

    if (value instanceof Date) {
      return value.toISOString();
    }
    return String(value);
  }
}
