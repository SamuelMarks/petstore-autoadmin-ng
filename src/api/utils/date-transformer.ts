/**
* This file is generated by a tool. Do not edit directly.
* Generated by openapi-angular-generator.
*/
import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { Observable, map } from "rxjs";

export const ISO_DATE_REGEX = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[+-]\d{2}:\d{2})$/;

/** Recursively traverses an object or array and converts ISO date strings to Date objects. */
export function transformDates(body: any): any {

    if (body === null || body === undefined || typeof body !== 'object') {
        return body;
    }

    if (Array.isArray(body)) {
        return body.map(item => transformDates(item));
    }

    // It's a non-array object, so we iterate its properties.
    const transformedBody: { [key: string]: any } = {};
    for (const key of Object.keys(body)) {
        const value = body[key];
        if (typeof value === 'string' && ISO_DATE_REGEX.test(value)) {
            transformedBody[key] = new Date(value);
        } else if (typeof value === 'object') {
            transformedBody[key] = transformDates(value);
        } else {
            transformedBody[key] = value;
        }
    }
    return transformedBody;
}

/** Intercepts HTTP responses and transforms ISO date strings to Date objects in the response body. */
@Injectable({ providedIn: 'root' })
export class DateInterceptor implements HttpInterceptor {
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {

        return next.handle(req).pipe(
            map(event => {
                if (event instanceof HttpResponse && event.body) {
                    // Return a new response with the transformed body
                    return event.clone({ body: transformDates(event.body) });
                }
                // Pass through all other events untouched
                return event;
            })
        );
    }
}
