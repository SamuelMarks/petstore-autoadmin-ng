/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated Angular service for Pet controller
* Do not edit this file manually
*/
import { HttpClient, HttpContext, HttpContextToken, HttpParams } from "@angular/common/http";
import { inject, Injectable } from "@angular/core";
import { Observable } from "rxjs";
import { BASE_PATH_DEFAULT, CLIENT_CONTEXT_TOKEN_DEFAULT, RequestOptions } from "../";
import { HttpParamsBuilder } from "../utils";
import { ApiResponse, Pet } from "../models";

@Injectable({ providedIn: "root" })
export class PetService {
    private readonly httpClient: HttpClient = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_DEFAULT);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_DEFAULT;

    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'default');
    }

    public(params: Params, options?: RequestOptions): Observable<ApiResponse> {
        const url = `${this.basePath}/pet/${params.petId}/uploadImage`;
        const context = this.createContextWithClientId(options?.context);
        return this.httpClient.post<ApiResponse>(url, null, { context });
    }

    public undefined2(params: Undefined2Params, options?: RequestOptions): Observable<void> {
        const url = `${this.basePath}/pet`;
        const context = this.createContextWithClientId(options?.context);
        return this.httpClient.POST<void>(url, null, { context });
    }

    public undefined3(params: Undefined3Params, options?: RequestOptions): Observable<void> {
        const url = `${this.basePath}/pet`;
        const context = this.createContextWithClientId(options?.context);
        return this.httpClient.PUT<void>(url, null, { context });
    }

    public undefined4(params: Undefined4Params, options?: RequestOptions): Observable<Pet[]> {
        const url = `${this.basePath}/pet/findByStatus`;
        const paramsBuilder = new HttpParamsBuilder();
        paramsBuilder.append('status', params.status);
        const httpParams = paramsBuilder.build();
        const context = this.createContextWithClientId(options?.context);
        return this.httpClient.GET<Pet[]>(url, null, { params: httpParams, context });
    }

    public undefined5(params: Undefined5Params, options?: RequestOptions): Observable<Pet[]> {
        const url = `${this.basePath}/pet/findByTags`;
        const paramsBuilder = new HttpParamsBuilder();
        paramsBuilder.append('tags', params.tags);
        const httpParams = paramsBuilder.build();
        const context = this.createContextWithClientId(options?.context);
        return this.httpClient.GET<Pet[]>(url, null, { params: httpParams, context });
    }

    public undefined6(params: Undefined6Params, options?: RequestOptions): Observable<Pet> {
        const url = `${this.basePath}/pet/${params.petId}`;
        const context = this.createContextWithClientId(options?.context);
        return this.httpClient.GET<Pet>(url, null, { context });
    }

    public undefined7(params: Undefined7Params, options?: RequestOptions): Observable<void> {
        const url = `${this.basePath}/pet/${params.petId}`;
        const context = this.createContextWithClientId(options?.context);
        return this.httpClient.POST<void>(url, null, { context });
    }

    public undefined8(params: Undefined8Params, options?: RequestOptions): Observable<void> {
        const url = `${this.basePath}/pet/${params.petId}`;
        const context = this.createContextWithClientId(options?.context);
        return this.httpClient.DELETE<void>(url, null, { context });
    }
}

export interface Params {
    petId: number;
    additionalMetadata?: string;
    file?: string;
}

export interface Undefined2Params {
    body: Pet;
}

export interface Undefined3Params {
    body: Pet;
}

export interface Undefined4Params {
    status: unknown;
}

export interface Undefined5Params {
    tags: unknown;
}

export interface Undefined6Params {
    petId: number;
}

export interface Undefined7Params {
    petId: number;
    name?: string;
    status?: string;
}

export interface Undefined8Params {
    api_key?: string;
    petId: number;
}
