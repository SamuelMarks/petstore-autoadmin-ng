/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated Angular service for Pet controller
* Do not edit this file manually
*/
import { HttpClient, HttpContext, HttpContextToken, HttpEvent, HttpParams, HttpResponse } from "@angular/common/http";
import { inject, Injectable } from "@angular/core";
import { Observable } from "rxjs";
import { BASE_PATH_DEFAULT, CLIENT_CONTEXT_TOKEN_DEFAULT, RequestOptions } from "../";
import { HttpParamsBuilder } from "../";
import { Pet } from "../models";

@Injectable({ providedIn: "root" })
export class PetService {
    private readonly httpClient: HttpClient = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_DEFAULT);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_DEFAULT;

    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'default');
    }

    uploadFile(petId: number, additionalMetadata?: string, file?: any, observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    uploadFile(petId: number, additionalMetadata?: string, file?: any, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    uploadFile(petId: number, additionalMetadata?: string, file?: any, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    uploadFile(petId: number, additionalMetadata?: string, file?: any, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<unknown> {
        const url = `${this.basePath}/pet/${petId}/uploadImage`;

        const requestOptions: Parameters<HttpClient["post"]>[1] = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, null, requestOptions);
    }

    addPet(pet?: Pet, observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    addPet(pet?: Pet, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    addPet(pet?: Pet, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    addPet(pet?: Pet, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<unknown> {
        const url = `${this.basePath}/pet`;

        const requestOptions: Parameters<HttpClient["post"]>[1] = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, pet, requestOptions);
    }

    updatePet(pet?: Pet, observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    updatePet(pet?: Pet, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    updatePet(pet?: Pet, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    updatePet(pet?: Pet, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<unknown> {
        const url = `${this.basePath}/pet`;

        const requestOptions: Parameters<HttpClient["put"]>[1] = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.put(url, pet, requestOptions);
    }

    findPetsByStatus(status: unknown[], observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    findPetsByStatus(status: unknown[], observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    findPetsByStatus(status: unknown[], observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    /** Multiple status values can be provided with comma separated strings */
    findPetsByStatus(status: unknown[], observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<unknown> {
        const url = `${this.basePath}/pet/findByStatus`;

        let params = new HttpParams();
        if (status != null) {
            params = HttpParamsBuilder.addToHttpParams(params, status, 'status');
        }

        const requestOptions: Parameters<HttpClient["get"]>[1] = {
            observe: observe as any,
            params,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    findPetsByTags(tags: unknown[], observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    findPetsByTags(tags: unknown[], observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    findPetsByTags(tags: unknown[], observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    /** Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing. */
    findPetsByTags(tags: unknown[], observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<unknown> {
        const url = `${this.basePath}/pet/findByTags`;

        let params = new HttpParams();
        if (tags != null) {
            params = HttpParamsBuilder.addToHttpParams(params, tags, 'tags');
        }

        const requestOptions: Parameters<HttpClient["get"]>[1] = {
            observe: observe as any,
            params,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    getPetById(petId: number, observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    getPetById(petId: number, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    getPetById(petId: number, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    /** Returns a single pet */
    getPetById(petId: number, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<unknown> {
        const url = `${this.basePath}/pet/${petId}`;

        const requestOptions: Parameters<HttpClient["get"]>[1] = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    updatePetWithForm(petId: number, name?: string, status?: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    updatePetWithForm(petId: number, name?: string, status?: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    updatePetWithForm(petId: number, name?: string, status?: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    updatePetWithForm(petId: number, name?: string, status?: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<unknown> {
        const url = `${this.basePath}/pet/${petId}`;

        const requestOptions: Parameters<HttpClient["post"]>[1] = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, null, requestOptions);
    }

    deletePet(petId: number, api_key?: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    deletePet(petId: number, api_key?: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    deletePet(petId: number, api_key?: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    deletePet(petId: number, api_key?: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<unknown> {
        const url = `${this.basePath}/pet/${petId}`;

        const requestOptions: Parameters<HttpClient["delete"]>[1] = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.delete(url, requestOptions);
    }
}
