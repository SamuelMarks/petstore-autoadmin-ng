/**
* This file is generated by a tool. Do not edit directly.
* Generated by openapi-angular-generator.
*/
import { Injectable, inject } from "@angular/core";
import { HttpClient, HttpContext, HttpParams, HttpResponse, HttpEvent, HttpHeaders, HttpContextToken } from "@angular/common/http";
import { Observable } from "rxjs";
import type { RequestOptions } from "../models";
import { BASE_PATH_DEFAULT, CLIENT_CONTEXT_TOKEN_DEFAULT } from "../tokens";
import { HttpParamsBuilder } from "../utils/http-params-builder";
import { Pet } from "../models/index";

@Injectable({ providedIn: 'root' })
export class PetService {
    private readonly http = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_DEFAULT);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_DEFAULT;

    /** Creates a new HttpContext with the client identifier token. */
    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'default');
    }

    uploadFile(petId: any, additionalMetadata?: any, file?: any, options?: RequestOptions): Observable<any>;
    uploadFile(petId: any, additionalMetadata?: any, file?: any, observe: 'response', options?: RequestOptions): Observable<HttpResponse<any>>;
    uploadFile(petId: any, additionalMetadata?: any, file?: any, observe: 'events', options?: RequestOptions): Observable<HttpEvent<any>>;
    uploadFile(petId: any, additionalMetadata?: any, file?: any, observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
        const url = `${this.basePath}/pet/${petId}/uploadImage`;

        return this.http.post(url, null, 
        {
            ...options,
            observe: observe as any,
            context: this.createContextWithClientId(options?.context)
            
        });
    }

    addPet(body: Pet, options?: RequestOptions): Observable<void>;
    addPet(body: Pet, observe: 'response', options?: RequestOptions): Observable<HttpResponse<void>>;
    addPet(body: Pet, observe: 'events', options?: RequestOptions): Observable<HttpEvent<void>>;
    addPet(body: Pet, observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
        const url = `${this.basePath}/pet`;

        return this.http.post(url, null, 
        {
            ...options,
            observe: observe as any,
            context: this.createContextWithClientId(options?.context)
            
        });
    }

    updatePet(body: Pet, options?: RequestOptions): Observable<void>;
    updatePet(body: Pet, observe: 'response', options?: RequestOptions): Observable<HttpResponse<void>>;
    updatePet(body: Pet, observe: 'events', options?: RequestOptions): Observable<HttpEvent<void>>;
    updatePet(body: Pet, observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
        const url = `${this.basePath}/pet`;

        return this.http.put(url, null, 
        {
            ...options,
            observe: observe as any,
            context: this.createContextWithClientId(options?.context)
            
        });
    }

    findPetsByStatus(status: any, options?: RequestOptions): Observable<any>;
    findPetsByStatus(status: any, observe: 'response', options?: RequestOptions): Observable<HttpResponse<any>>;
    findPetsByStatus(status: any, observe: 'events', options?: RequestOptions): Observable<HttpEvent<any>>;
    findPetsByStatus(status: any, observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
        const url = `${this.basePath}/pet/findByStatus`;

        let params = new HttpParams();
        if (status != null) params = HttpParamsBuilder.addToHttpParams(params, status, 'status');

        return this.http.get(url, 
        {
            ...options,
            observe: observe as any,
            context: this.createContextWithClientId(options?.context)
            , params
        });
    }

    findPetsByTags(tags: any, options?: RequestOptions): Observable<any>;
    findPetsByTags(tags: any, observe: 'response', options?: RequestOptions): Observable<HttpResponse<any>>;
    findPetsByTags(tags: any, observe: 'events', options?: RequestOptions): Observable<HttpEvent<any>>;
    findPetsByTags(tags: any, observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
        const url = `${this.basePath}/pet/findByTags`;

        let params = new HttpParams();
        if (tags != null) params = HttpParamsBuilder.addToHttpParams(params, tags, 'tags');

        return this.http.get(url, 
        {
            ...options,
            observe: observe as any,
            context: this.createContextWithClientId(options?.context)
            , params
        });
    }

    getPetById(petId: any, options?: RequestOptions): Observable<any>;
    getPetById(petId: any, observe: 'response', options?: RequestOptions): Observable<HttpResponse<any>>;
    getPetById(petId: any, observe: 'events', options?: RequestOptions): Observable<HttpEvent<any>>;
    getPetById(petId: any, observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
        const url = `${this.basePath}/pet/${petId}`;

        return this.http.get(url, 
        {
            ...options,
            observe: observe as any,
            context: this.createContextWithClientId(options?.context)
            
        });
    }

    updatePetWithForm(petId: any, name?: any, status?: any, options?: RequestOptions): Observable<void>;
    updatePetWithForm(petId: any, name?: any, status?: any, observe: 'response', options?: RequestOptions): Observable<HttpResponse<void>>;
    updatePetWithForm(petId: any, name?: any, status?: any, observe: 'events', options?: RequestOptions): Observable<HttpEvent<void>>;
    updatePetWithForm(petId: any, name?: any, status?: any, observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
        const url = `${this.basePath}/pet/${petId}`;

        return this.http.post(url, null, 
        {
            ...options,
            observe: observe as any,
            context: this.createContextWithClientId(options?.context)
            
        });
    }

    deletePet(petId: any, apiKey?: any, options?: RequestOptions): Observable<void>;
    deletePet(petId: any, apiKey?: any, observe: 'response', options?: RequestOptions): Observable<HttpResponse<void>>;
    deletePet(petId: any, apiKey?: any, observe: 'events', options?: RequestOptions): Observable<HttpEvent<void>>;
    deletePet(petId: any, apiKey?: any, observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
        const url = `${this.basePath}/pet/${petId}`;

        let headers = new HttpHeaders();
        if (apiKey != null) headers = headers.append('api_key', String(apiKey));

        return this.http.delete(url, 
        {
            ...options,
            observe: observe as any,
            context: this.createContextWithClientId(options?.context)
            , headers
        });
    }
}
