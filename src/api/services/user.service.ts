/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated Angular service for User controller
* Do not edit this file manually
*/
import { HttpClient, HttpContext, HttpContextToken, HttpEvent, HttpParams, HttpResponse } from "@angular/common/http";
import { inject, Injectable } from "@angular/core";
import { Observable } from "rxjs";
import { BASE_PATH_DEFAULT, CLIENT_CONTEXT_TOKEN_DEFAULT, RequestOptions } from "../";
import { HttpParamsBuilder } from "../";

@Injectable({ providedIn: "root" })
export class UserService {
    private readonly httpClient: HttpClient = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_DEFAULT);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_DEFAULT;

    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'default');
    }

    createUsersWithListInput(observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    createUsersWithListInput(observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    createUsersWithListInput(observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    createUsersWithListInput(observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/user/createWithList`;

        const requestOptions: Parameters<HttpClient["post"]>[1] = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, null, requestOptions);
    }

    getUserByName(username: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    getUserByName(username: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    getUserByName(username: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    getUserByName(username: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/user/${username}`;

        const requestOptions: Parameters<HttpClient["get"]>[1] = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    updateUser(username: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    updateUser(username: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    updateUser(username: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    /** This can only be done by the logged in user. */
    updateUser(username: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/user/${username}`;

        const requestOptions: Parameters<HttpClient["put"]>[1] = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.put(url, null, requestOptions);
    }

    deleteUser(username: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    deleteUser(username: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    deleteUser(username: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    /** This can only be done by the logged in user. */
    deleteUser(username: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/user/${username}`;

        const requestOptions: Parameters<HttpClient["delete"]>[1] = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.delete(url, requestOptions);
    }

    loginUser(username: string, password: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    loginUser(username: string, password: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    loginUser(username: string, password: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    loginUser(username: string, password: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/user/login`;

        let params = new HttpParams();
        if (username != null) {
            params = HttpParamsBuilder.addToHttpParams(params, username, 'username');
        }
        if (password != null) {
            params = HttpParamsBuilder.addToHttpParams(params, password, 'password');
        }

        const requestOptions: Parameters<HttpClient["get"]>[1] = {
            observe: observe as any,
            params,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    logoutUser(observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    logoutUser(observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    logoutUser(observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    logoutUser(observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/user/logout`;

        const requestOptions: Parameters<HttpClient["get"]>[1] = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    createUsersWithArrayInput(observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    createUsersWithArrayInput(observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    createUsersWithArrayInput(observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    createUsersWithArrayInput(observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/user/createWithArray`;

        const requestOptions: Parameters<HttpClient["post"]>[1] = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, null, requestOptions);
    }

    createUser(observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    createUser(observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    createUser(observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    /** This can only be done by the logged in user. */
    createUser(observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/user`;

        const requestOptions: Parameters<HttpClient["post"]>[1] = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, null, requestOptions);
    }
}
