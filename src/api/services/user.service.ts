/**
* This file is generated by a tool. Do not edit directly.
* Generated by openapi-angular-generator.
*/
import { Injectable, inject } from "@angular/core";
import { HttpClient, HttpContext, HttpParams, HttpResponse, HttpEvent, HttpHeaders, HttpContextToken } from "@angular/common/http";
import { Observable } from "rxjs";
import type { RequestOptions } from "../models";
import { BASE_PATH_DEFAULT, CLIENT_CONTEXT_TOKEN_DEFAULT } from "../tokens";
import { HttpParamsBuilder } from "../utils/http-params-builder";
import { User } from "../models/index";

@Injectable({ providedIn: 'root' })
export class UserService {
    private readonly http = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_DEFAULT);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_DEFAULT;

    /** Creates a new HttpContext with the client identifier token. */
    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'default');
    }

    createUsersWithListInput(body: User[], options?: RequestOptions): Observable<void>;
    createUsersWithListInput(body: User[], observe: 'response', options?: RequestOptions): Observable<HttpResponse<void>>;
    createUsersWithListInput(body: User[], observe: 'events', options?: RequestOptions): Observable<HttpEvent<void>>;
    createUsersWithListInput(body: User[], observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
        const url = `${this.basePath}/user/createWithList`;

        return this.http.post(url, null, 
        {
            ...options,
            observe: observe as any,
            context: this.createContextWithClientId(options?.context)
            
        });
    }

    getUserByName(username: any, options?: RequestOptions): Observable<any>;
    getUserByName(username: any, observe: 'response', options?: RequestOptions): Observable<HttpResponse<any>>;
    getUserByName(username: any, observe: 'events', options?: RequestOptions): Observable<HttpEvent<any>>;
    getUserByName(username: any, observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
        const url = `${this.basePath}/user/${username}`;

        return this.http.get(url, 
        {
            ...options,
            observe: observe as any,
            context: this.createContextWithClientId(options?.context)
            
        });
    }

    updateUser(username: any, body: User, options?: RequestOptions): Observable<void>;
    updateUser(username: any, body: User, observe: 'response', options?: RequestOptions): Observable<HttpResponse<void>>;
    updateUser(username: any, body: User, observe: 'events', options?: RequestOptions): Observable<HttpEvent<void>>;
    updateUser(username: any, body: User, observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
        const url = `${this.basePath}/user/${username}`;

        return this.http.put(url, null, 
        {
            ...options,
            observe: observe as any,
            context: this.createContextWithClientId(options?.context)
            
        });
    }

    deleteUser(username: any, options?: RequestOptions): Observable<void>;
    deleteUser(username: any, observe: 'response', options?: RequestOptions): Observable<HttpResponse<void>>;
    deleteUser(username: any, observe: 'events', options?: RequestOptions): Observable<HttpEvent<void>>;
    deleteUser(username: any, observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
        const url = `${this.basePath}/user/${username}`;

        return this.http.delete(url, 
        {
            ...options,
            observe: observe as any,
            context: this.createContextWithClientId(options?.context)
            
        });
    }

    loginUser(username: any, password: any, options?: RequestOptions): Observable<any>;
    loginUser(username: any, password: any, observe: 'response', options?: RequestOptions): Observable<HttpResponse<any>>;
    loginUser(username: any, password: any, observe: 'events', options?: RequestOptions): Observable<HttpEvent<any>>;
    loginUser(username: any, password: any, observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
        const url = `${this.basePath}/user/login`;

        let params = new HttpParams();
        if (username != null) params = HttpParamsBuilder.addToHttpParams(params, username, 'username');
        if (password != null) params = HttpParamsBuilder.addToHttpParams(params, password, 'password');

        return this.http.get(url, 
        {
            ...options,
            observe: observe as any,
            context: this.createContextWithClientId(options?.context)
            , params
        });
    }

    logoutUser(options?: RequestOptions): Observable<void>;
    logoutUser(observe: 'response', options?: RequestOptions): Observable<HttpResponse<void>>;
    logoutUser(observe: 'events', options?: RequestOptions): Observable<HttpEvent<void>>;
    logoutUser(observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
        const url = `${this.basePath}/user/logout`;

        return this.http.get(url, 
        {
            ...options,
            observe: observe as any,
            context: this.createContextWithClientId(options?.context)
            
        });
    }

    createUsersWithArrayInput(body: User[], options?: RequestOptions): Observable<void>;
    createUsersWithArrayInput(body: User[], observe: 'response', options?: RequestOptions): Observable<HttpResponse<void>>;
    createUsersWithArrayInput(body: User[], observe: 'events', options?: RequestOptions): Observable<HttpEvent<void>>;
    createUsersWithArrayInput(body: User[], observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
        const url = `${this.basePath}/user/createWithArray`;

        return this.http.post(url, null, 
        {
            ...options,
            observe: observe as any,
            context: this.createContextWithClientId(options?.context)
            
        });
    }

    createUser(body: User, options?: RequestOptions): Observable<void>;
    createUser(body: User, observe: 'response', options?: RequestOptions): Observable<HttpResponse<void>>;
    createUser(body: User, observe: 'events', options?: RequestOptions): Observable<HttpEvent<void>>;
    createUser(body: User, observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
        const url = `${this.basePath}/user`;

        return this.http.post(url, null, 
        {
            ...options,
            observe: observe as any,
            context: this.createContextWithClientId(options?.context)
            
        });
    }
}
