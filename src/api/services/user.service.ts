/**
* This file is generated by a tool. Do not edit directly.
* Generated by openapi-angular-generator.
*/
import { Injectable, inject } from "@angular/core";
import { HttpClient, HttpContext, HttpParams, HttpResponse, HttpEvent, HttpHeaders, HttpContextToken } from "@angular/common/http";
import { Observable } from "rxjs";
import type { RequestOptions } from "../models";
import { BASE_PATH_DEFAULT, CLIENT_CONTEXT_TOKEN_DEFAULT } from "../tokens";
import { HttpParamsBuilder } from "../utils/http-params-builder";
import { User } from "../models/index";

@Injectable({ providedIn: 'root' })
export class UserService {
    private readonly http = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_DEFAULT);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_DEFAULT;

    /** Creates a new HttpContext with the client identifier token. */
    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'default');
    }

    createUsersWithListInput(body?: User[], options: RequestOptions & { observe: 'response' }): Observable<HttpResponse<void>>;
    createUsersWithListInput(body?: User[], options: RequestOptions & { observe: 'events' }): Observable<HttpEvent<void>>;
    createUsersWithListInput(body?: User[], options: RequestOptions & { responseType: 'blob' }): Observable<Blob>;
    createUsersWithListInput(body?: User[], options: RequestOptions & { responseType: 'text' }): Observable<string>;
    createUsersWithListInput(body?: User[], options?: RequestOptions & { observe?: 'body' }): Observable<void>;
    createUsersWithListInput(body?: User[], options?: RequestOptions & { observe?: "body" | "events" | "response", responseType?: "blob" | "text" | "json" }): Observable<any> {
        const url = `${this.basePath}/user/createWithList`;

            const finalOptions = { context: this.createContextWithClientId(options?.context), reportProgress: options?.reportProgress, withCredentials: options?.withCredentials };


            switch (options?.observe) {
              case 'response': {
                return this.http.post<void>(url, body, { ...finalOptions, observe: 'response' });
              }
              case 'events': {
                return this.http.post<void>(url, body, { ...finalOptions, observe: 'events' });
              }
              default: { // 'body' or undefined
                switch (options?.responseType) {
                  case 'blob': {
                    return this.http.post(url, body, { ...finalOptions, responseType: 'blob' });
                  }
                  case 'text': {
                    return this.http.post(url, body, { ...finalOptions,  responseType: 'text' });
                  }
                  default: { // 'json' or undefined
                    return this.http.post<void>(url, body, finalOptions);
                  }
                }
              }
            }
    }

    getUserByName(username: string, options: RequestOptions & { observe: 'response' }): Observable<HttpResponse<User>>;
    getUserByName(username: string, options: RequestOptions & { observe: 'events' }): Observable<HttpEvent<User>>;
    getUserByName(username: string, options: RequestOptions & { responseType: 'blob' }): Observable<Blob>;
    getUserByName(username: string, options: RequestOptions & { responseType: 'text' }): Observable<string>;
    getUserByName(username: string, options?: RequestOptions & { observe?: 'body' }): Observable<User>;
    getUserByName(username: string, options?: RequestOptions & { observe?: "body" | "events" | "response", responseType?: "blob" | "text" | "json" }): Observable<any> {
        const url = `${this.basePath}/user/${username}`;

            const finalOptions = { context: this.createContextWithClientId(options?.context), reportProgress: options?.reportProgress, withCredentials: options?.withCredentials };


            switch (options?.observe) {
              case 'response': {
                return this.http.get<User>(url, { ...finalOptions, observe: 'response' });
              }
              case 'events': {
                return this.http.get<User>(url, { ...finalOptions, observe: 'events' });
              }
              default: { // 'body' or undefined
                switch (options?.responseType) {
                  case 'blob': {
                    return this.http.get(url, { ...finalOptions, responseType: 'blob' });
                  }
                  case 'text': {
                    return this.http.get(url, { ...finalOptions,  responseType: 'text' });
                  }
                  default: { // 'json' or undefined
                    return this.http.get<User>(url, finalOptions);
                  }
                }
              }
            }
    }

    updateUser(username: string, user?: User, options: RequestOptions & { observe: 'response' }): Observable<HttpResponse<void>>;
    updateUser(username: string, user?: User, options: RequestOptions & { observe: 'events' }): Observable<HttpEvent<void>>;
    updateUser(username: string, user?: User, options: RequestOptions & { responseType: 'blob' }): Observable<Blob>;
    updateUser(username: string, user?: User, options: RequestOptions & { responseType: 'text' }): Observable<string>;
    updateUser(username: string, user?: User, options?: RequestOptions & { observe?: 'body' }): Observable<void>;
    updateUser(username: string, user?: User, options?: RequestOptions & { observe?: "body" | "events" | "response", responseType?: "blob" | "text" | "json" }): Observable<any> {
        const url = `${this.basePath}/user/${username}`;

            const finalOptions = { context: this.createContextWithClientId(options?.context), reportProgress: options?.reportProgress, withCredentials: options?.withCredentials };


            switch (options?.observe) {
              case 'response': {
                return this.http.put<void>(url, user, { ...finalOptions, observe: 'response' });
              }
              case 'events': {
                return this.http.put<void>(url, user, { ...finalOptions, observe: 'events' });
              }
              default: { // 'body' or undefined
                switch (options?.responseType) {
                  case 'blob': {
                    return this.http.put(url, user, { ...finalOptions, responseType: 'blob' });
                  }
                  case 'text': {
                    return this.http.put(url, user, { ...finalOptions,  responseType: 'text' });
                  }
                  default: { // 'json' or undefined
                    return this.http.put<void>(url, user, finalOptions);
                  }
                }
              }
            }
    }

    deleteUser(username: string, options: RequestOptions & { observe: 'response' }): Observable<HttpResponse<void>>;
    deleteUser(username: string, options: RequestOptions & { observe: 'events' }): Observable<HttpEvent<void>>;
    deleteUser(username: string, options: RequestOptions & { responseType: 'blob' }): Observable<Blob>;
    deleteUser(username: string, options: RequestOptions & { responseType: 'text' }): Observable<string>;
    deleteUser(username: string, options?: RequestOptions & { observe?: 'body' }): Observable<void>;
    deleteUser(username: string, options?: RequestOptions & { observe?: "body" | "events" | "response", responseType?: "blob" | "text" | "json" }): Observable<any> {
        const url = `${this.basePath}/user/${username}`;

            const finalOptions = { context: this.createContextWithClientId(options?.context), reportProgress: options?.reportProgress, withCredentials: options?.withCredentials };


            switch (options?.observe) {
              case 'response': {
                return this.http.delete<void>(url, { ...finalOptions, observe: 'response' });
              }
              case 'events': {
                return this.http.delete<void>(url, { ...finalOptions, observe: 'events' });
              }
              default: { // 'body' or undefined
                switch (options?.responseType) {
                  case 'blob': {
                    return this.http.delete(url, { ...finalOptions, responseType: 'blob' });
                  }
                  case 'text': {
                    return this.http.delete(url, { ...finalOptions,  responseType: 'text' });
                  }
                  default: { // 'json' or undefined
                    return this.http.delete<void>(url, finalOptions);
                  }
                }
              }
            }
    }

    loginUser(username: string, password: string, options: RequestOptions & { observe: 'response' }): Observable<HttpResponse<string>>;
    loginUser(username: string, password: string, options: RequestOptions & { observe: 'events' }): Observable<HttpEvent<string>>;
    loginUser(username: string, password: string, options: RequestOptions & { responseType: 'blob' }): Observable<Blob>;
    loginUser(username: string, password: string, options: RequestOptions & { responseType: 'text' }): Observable<string>;
    loginUser(username: string, password: string, options?: RequestOptions & { observe?: 'body' }): Observable<string>;
    loginUser(username: string, password: string, options?: RequestOptions & { observe?: "body" | "events" | "response", responseType?: "blob" | "text" | "json" }): Observable<any> {
        const url = `${this.basePath}/user/login`;

            let params = new HttpParams(options?.params as any);
            if (username != null) params = HttpParamsBuilder.addToHttpParams(params, username, 'username');
            if (password != null) params = HttpParamsBuilder.addToHttpParams(params, password, 'password');
            const finalOptions = { context: this.createContextWithClientId(options?.context), reportProgress: options?.reportProgress, withCredentials: options?.withCredentials, params };


            switch (options?.observe) {
              case 'response': {
                return this.http.get<string>(url, { ...finalOptions, observe: 'response' });
              }
              case 'events': {
                return this.http.get<string>(url, { ...finalOptions, observe: 'events' });
              }
              default: { // 'body' or undefined
                switch (options?.responseType) {
                  case 'blob': {
                    return this.http.get(url, { ...finalOptions, responseType: 'blob' });
                  }
                  case 'text': {
                    return this.http.get(url, { ...finalOptions,  responseType: 'text' });
                  }
                  default: { // 'json' or undefined
                    return this.http.get<string>(url, finalOptions);
                  }
                }
              }
            }
    }

    logoutUser(options: RequestOptions & { observe: 'response' }): Observable<HttpResponse<void>>;
    logoutUser(options: RequestOptions & { observe: 'events' }): Observable<HttpEvent<void>>;
    logoutUser(options: RequestOptions & { responseType: 'blob' }): Observable<Blob>;
    logoutUser(options: RequestOptions & { responseType: 'text' }): Observable<string>;
    logoutUser(options?: RequestOptions & { observe?: 'body' }): Observable<void>;
    logoutUser(options?: RequestOptions & { observe?: "body" | "events" | "response", responseType?: "blob" | "text" | "json" }): Observable<any> {
        const url = `${this.basePath}/user/logout`;

            const finalOptions = { context: this.createContextWithClientId(options?.context), reportProgress: options?.reportProgress, withCredentials: options?.withCredentials };


            switch (options?.observe) {
              case 'response': {
                return this.http.get<void>(url, { ...finalOptions, observe: 'response' });
              }
              case 'events': {
                return this.http.get<void>(url, { ...finalOptions, observe: 'events' });
              }
              default: { // 'body' or undefined
                switch (options?.responseType) {
                  case 'blob': {
                    return this.http.get(url, { ...finalOptions, responseType: 'blob' });
                  }
                  case 'text': {
                    return this.http.get(url, { ...finalOptions,  responseType: 'text' });
                  }
                  default: { // 'json' or undefined
                    return this.http.get<void>(url, finalOptions);
                  }
                }
              }
            }
    }

    createUsersWithArrayInput(body?: User[], options: RequestOptions & { observe: 'response' }): Observable<HttpResponse<void>>;
    createUsersWithArrayInput(body?: User[], options: RequestOptions & { observe: 'events' }): Observable<HttpEvent<void>>;
    createUsersWithArrayInput(body?: User[], options: RequestOptions & { responseType: 'blob' }): Observable<Blob>;
    createUsersWithArrayInput(body?: User[], options: RequestOptions & { responseType: 'text' }): Observable<string>;
    createUsersWithArrayInput(body?: User[], options?: RequestOptions & { observe?: 'body' }): Observable<void>;
    createUsersWithArrayInput(body?: User[], options?: RequestOptions & { observe?: "body" | "events" | "response", responseType?: "blob" | "text" | "json" }): Observable<any> {
        const url = `${this.basePath}/user/createWithArray`;

            const finalOptions = { context: this.createContextWithClientId(options?.context), reportProgress: options?.reportProgress, withCredentials: options?.withCredentials };


            switch (options?.observe) {
              case 'response': {
                return this.http.post<void>(url, body, { ...finalOptions, observe: 'response' });
              }
              case 'events': {
                return this.http.post<void>(url, body, { ...finalOptions, observe: 'events' });
              }
              default: { // 'body' or undefined
                switch (options?.responseType) {
                  case 'blob': {
                    return this.http.post(url, body, { ...finalOptions, responseType: 'blob' });
                  }
                  case 'text': {
                    return this.http.post(url, body, { ...finalOptions,  responseType: 'text' });
                  }
                  default: { // 'json' or undefined
                    return this.http.post<void>(url, body, finalOptions);
                  }
                }
              }
            }
    }

    createUser(user?: User, options: RequestOptions & { observe: 'response' }): Observable<HttpResponse<void>>;
    createUser(user?: User, options: RequestOptions & { observe: 'events' }): Observable<HttpEvent<void>>;
    createUser(user?: User, options: RequestOptions & { responseType: 'blob' }): Observable<Blob>;
    createUser(user?: User, options: RequestOptions & { responseType: 'text' }): Observable<string>;
    createUser(user?: User, options?: RequestOptions & { observe?: 'body' }): Observable<void>;
    createUser(user?: User, options?: RequestOptions & { observe?: "body" | "events" | "response", responseType?: "blob" | "text" | "json" }): Observable<any> {
        const url = `${this.basePath}/user`;

            const finalOptions = { context: this.createContextWithClientId(options?.context), reportProgress: options?.reportProgress, withCredentials: options?.withCredentials };


            switch (options?.observe) {
              case 'response': {
                return this.http.post<void>(url, user, { ...finalOptions, observe: 'response' });
              }
              case 'events': {
                return this.http.post<void>(url, user, { ...finalOptions, observe: 'events' });
              }
              default: { // 'body' or undefined
                switch (options?.responseType) {
                  case 'blob': {
                    return this.http.post(url, user, { ...finalOptions, responseType: 'blob' });
                  }
                  case 'text': {
                    return this.http.post(url, user, { ...finalOptions,  responseType: 'text' });
                  }
                  default: { // 'json' or undefined
                    return this.http.post<void>(url, user, finalOptions);
                  }
                }
              }
            }
    }
}
