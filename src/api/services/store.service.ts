/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated Angular service for Store controller
* Do not edit this file manually
*/
import { HttpClient, HttpContext, HttpContextToken, HttpParams } from "@angular/common/http";
import { inject, Injectable } from "@angular/core";
import { Observable } from "rxjs";
import { BASE_PATH_DEFAULT, CLIENT_CONTEXT_TOKEN_DEFAULT, RequestOptions } from "../";
import { HttpParamsBuilder } from "../utils";
import { Order } from "../models";

@Injectable({ providedIn: "root" })
export class StoreService {
    private readonly httpClient: HttpClient = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_DEFAULT);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_DEFAULT;

    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'default');
    }

    public(options?: RequestOptions): Observable<unknown> {
        const url = `${this.basePath}/store/inventory`;
        const context = this.createContextWithClientId(options?.context);
        return this.httpClient.GET<unknown>(url, null, { context });
    }

    public undefined2(params: Undefined2Params, options?: RequestOptions): Observable<Order> {
        const url = `${this.basePath}/store/order`;
        const context = this.createContextWithClientId(options?.context);
        return this.httpClient.POST<Order>(url, null, { context });
    }

    public undefined3(params: Undefined3Params, options?: RequestOptions): Observable<Order> {
        const url = `${this.basePath}/store/order/${params.orderId}`;
        const context = this.createContextWithClientId(options?.context);
        return this.httpClient.GET<Order>(url, null, { context });
    }

    public undefined4(params: Undefined4Params, options?: RequestOptions): Observable<void> {
        const url = `${this.basePath}/store/order/${params.orderId}`;
        const context = this.createContextWithClientId(options?.context);
        return this.httpClient.DELETE<void>(url, null, { context });
    }
}

export interface Undefined2Params {
    body: Order;
}

export interface Undefined3Params {
    orderId: number;
}

export interface Undefined4Params {
    orderId: number;
}
