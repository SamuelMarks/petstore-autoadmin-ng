/**
 * This file is generated by a tool. Do not edit directly.
 * Generated by openapi-angular-generator.
 */
import { inject, Injectable } from "@angular/core";
import { HttpClient, HttpContext, HttpContextToken, HttpEvent, HttpResponse } from "@angular/common/http";
import { Observable } from "rxjs";
import type { RequestOptions } from "../models";
import { BASE_PATH_DEFAULT, CLIENT_CONTEXT_TOKEN_DEFAULT } from "../tokens";
import { Order } from "../models/index";

@Injectable({ providedIn: 'root' })
export class StoreService {
  private readonly http = inject(HttpClient);
  private readonly basePath: string = inject(BASE_PATH_DEFAULT);
  private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_DEFAULT;

  /** Creates a new HttpContext with the client identifier token. */
  private createContextWithClientId(existingContext?: HttpContext): HttpContext {
    const context = existingContext || new HttpContext();
    return context.set(this.clientContextToken, 'default');
  }

  getInventory(options?: RequestOptions): Observable<any>;
  getInventory(observe: 'response', options?: RequestOptions): Observable<HttpResponse<any>>;
  getInventory(observe: 'events', options?: RequestOptions): Observable<HttpEvent<any>>;
  getInventory(observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
    const url = `${this.basePath}/store/inventory`;

    return this.http.get(url,
      {
        ...options,
        observe: observe as any,
        context: this.createContextWithClientId(options?.context)

      });
  }

  placeOrder(body: Order, options?: RequestOptions): Observable<any>;
  placeOrder(body: Order, observe: 'response', options?: RequestOptions): Observable<HttpResponse<any>>;
  placeOrder(body: Order, observe: 'events', options?: RequestOptions): Observable<HttpEvent<any>>;
  placeOrder(body: Order, observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
    const url = `${this.basePath}/store/order`;

    return this.http.post(url, null,
      {
        ...options,
        observe: observe as any,
        context: this.createContextWithClientId(options?.context)

      });
  }

  getOrderById(orderId: any, options?: RequestOptions): Observable<any>;
  getOrderById(orderId: any, observe: 'response', options?: RequestOptions): Observable<HttpResponse<any>>;
  getOrderById(orderId: any, observe: 'events', options?: RequestOptions): Observable<HttpEvent<any>>;
  getOrderById(orderId: any, observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
    const url = `${this.basePath}/store/order/${orderId}`;

    return this.http.get(url,
      {
        ...options,
        observe: observe as any,
        context: this.createContextWithClientId(options?.context)

      });
  }

  deleteOrder(orderId: any, options?: RequestOptions): Observable<void>;
  deleteOrder(orderId: any, observe: 'response', options?: RequestOptions): Observable<HttpResponse<void>>;
  deleteOrder(orderId: any, observe: 'events', options?: RequestOptions): Observable<HttpEvent<void>>;
  deleteOrder(orderId: any, observe?: 'body' | 'response' | 'events', options?: RequestOptions): Observable<any> {
    const url = `${this.basePath}/store/order/${orderId}`;

    return this.http.delete(url,
      {
        ...options,
        observe: observe as any,
        context: this.createContextWithClientId(options?.context)

      });
  }
}
