/**
* This file is generated by a tool. Do not edit directly.
* Generated by openapi-angular-generator.
*/
import { Injectable, inject } from "@angular/core";
import { HttpClient, HttpContext, HttpParams, HttpResponse, HttpEvent, HttpHeaders, HttpContextToken } from "@angular/common/http";
import { Observable } from "rxjs";
import type { RequestOptions } from "../models";
import { BASE_PATH_DEFAULT, CLIENT_CONTEXT_TOKEN_DEFAULT } from "../tokens";
import { HttpParamsBuilder } from "../utils/http-params-builder";
import { Order } from "../models/index";

@Injectable({ providedIn: 'root' })
export class StoreService {
    private readonly http = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_DEFAULT);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_DEFAULT;

    /** Creates a new HttpContext with the client identifier token. */
    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'default');
    }

    getInventory(options: RequestOptions & { observe: 'response' }): Observable<HttpResponse<Record<string, number>>>;
    getInventory(options: RequestOptions & { observe: 'events' }): Observable<HttpEvent<Record<string, number>>>;
    getInventory(options: RequestOptions & { responseType: 'blob' }): Observable<Blob>;
    getInventory(options: RequestOptions & { responseType: 'text' }): Observable<string>;
    getInventory(options?: RequestOptions & { observe?: 'body' }): Observable<Record<string, number>>;
    getInventory(options?: RequestOptions & { observe?: "body" | "events" | "response", responseType?: "blob" | "text" | "json" }): Observable<any> {
        const url = `${this.basePath}/store/inventory`;

            const finalOptions = { context: this.createContextWithClientId(options?.context), reportProgress: options?.reportProgress, withCredentials: options?.withCredentials };


            switch (options?.observe) {
              case 'response': {
                return this.http.get<Record<string, number>>(url, { ...finalOptions, observe: 'response' });
              }
              case 'events': {
                return this.http.get<Record<string, number>>(url, { ...finalOptions, observe: 'events' });
              }
              default: { // 'body' or undefined
                switch (options?.responseType) {
                  case 'blob': {
                    return this.http.get(url, { ...finalOptions, responseType: 'blob' });
                  }
                  case 'text': {
                    return this.http.get(url, { ...finalOptions,  responseType: 'text' });
                  }
                  default: { // 'json' or undefined
                    return this.http.get<Record<string, number>>(url, finalOptions);
                  }
                }
              }
            }
    }

    placeOrder(order?: Order, options: RequestOptions & { observe: 'response' }): Observable<HttpResponse<Order>>;
    placeOrder(order?: Order, options: RequestOptions & { observe: 'events' }): Observable<HttpEvent<Order>>;
    placeOrder(order?: Order, options: RequestOptions & { responseType: 'blob' }): Observable<Blob>;
    placeOrder(order?: Order, options: RequestOptions & { responseType: 'text' }): Observable<string>;
    placeOrder(order?: Order, options?: RequestOptions & { observe?: 'body' }): Observable<Order>;
    placeOrder(order?: Order, options?: RequestOptions & { observe?: "body" | "events" | "response", responseType?: "blob" | "text" | "json" }): Observable<any> {
        const url = `${this.basePath}/store/order`;

            const finalOptions = { context: this.createContextWithClientId(options?.context), reportProgress: options?.reportProgress, withCredentials: options?.withCredentials };


            switch (options?.observe) {
              case 'response': {
                return this.http.post<Order>(url, order, { ...finalOptions, observe: 'response' });
              }
              case 'events': {
                return this.http.post<Order>(url, order, { ...finalOptions, observe: 'events' });
              }
              default: { // 'body' or undefined
                switch (options?.responseType) {
                  case 'blob': {
                    return this.http.post(url, order, { ...finalOptions, responseType: 'blob' });
                  }
                  case 'text': {
                    return this.http.post(url, order, { ...finalOptions,  responseType: 'text' });
                  }
                  default: { // 'json' or undefined
                    return this.http.post<Order>(url, order, finalOptions);
                  }
                }
              }
            }
    }

    getOrderById(orderId: number, options: RequestOptions & { observe: 'response' }): Observable<HttpResponse<Order>>;
    getOrderById(orderId: number, options: RequestOptions & { observe: 'events' }): Observable<HttpEvent<Order>>;
    getOrderById(orderId: number, options: RequestOptions & { responseType: 'blob' }): Observable<Blob>;
    getOrderById(orderId: number, options: RequestOptions & { responseType: 'text' }): Observable<string>;
    getOrderById(orderId: number, options?: RequestOptions & { observe?: 'body' }): Observable<Order>;
    getOrderById(orderId: number, options?: RequestOptions & { observe?: "body" | "events" | "response", responseType?: "blob" | "text" | "json" }): Observable<any> {
        const url = `${this.basePath}/store/order/${orderId}`;

            const finalOptions = { context: this.createContextWithClientId(options?.context), reportProgress: options?.reportProgress, withCredentials: options?.withCredentials };


            switch (options?.observe) {
              case 'response': {
                return this.http.get<Order>(url, { ...finalOptions, observe: 'response' });
              }
              case 'events': {
                return this.http.get<Order>(url, { ...finalOptions, observe: 'events' });
              }
              default: { // 'body' or undefined
                switch (options?.responseType) {
                  case 'blob': {
                    return this.http.get(url, { ...finalOptions, responseType: 'blob' });
                  }
                  case 'text': {
                    return this.http.get(url, { ...finalOptions,  responseType: 'text' });
                  }
                  default: { // 'json' or undefined
                    return this.http.get<Order>(url, finalOptions);
                  }
                }
              }
            }
    }

    deleteOrder(orderId: number, options: RequestOptions & { observe: 'response' }): Observable<HttpResponse<void>>;
    deleteOrder(orderId: number, options: RequestOptions & { observe: 'events' }): Observable<HttpEvent<void>>;
    deleteOrder(orderId: number, options: RequestOptions & { responseType: 'blob' }): Observable<Blob>;
    deleteOrder(orderId: number, options: RequestOptions & { responseType: 'text' }): Observable<string>;
    deleteOrder(orderId: number, options?: RequestOptions & { observe?: 'body' }): Observable<void>;
    deleteOrder(orderId: number, options?: RequestOptions & { observe?: "body" | "events" | "response", responseType?: "blob" | "text" | "json" }): Observable<any> {
        const url = `${this.basePath}/store/order/${orderId}`;

            const finalOptions = { context: this.createContextWithClientId(options?.context), reportProgress: options?.reportProgress, withCredentials: options?.withCredentials };


            switch (options?.observe) {
              case 'response': {
                return this.http.delete<void>(url, { ...finalOptions, observe: 'response' });
              }
              case 'events': {
                return this.http.delete<void>(url, { ...finalOptions, observe: 'events' });
              }
              default: { // 'body' or undefined
                switch (options?.responseType) {
                  case 'blob': {
                    return this.http.delete(url, { ...finalOptions, responseType: 'blob' });
                  }
                  case 'text': {
                    return this.http.delete(url, { ...finalOptions,  responseType: 'text' });
                  }
                  default: { // 'json' or undefined
                    return this.http.delete<void>(url, finalOptions);
                  }
                }
              }
            }
    }
}
