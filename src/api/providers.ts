/**
 * This file is generated by a tool. Do not edit directly.
 * Generated by openapi-angular-generator.
 */
import { EnvironmentProviders, makeEnvironmentProviders, Provider } from "@angular/core";
import { HTTP_INTERCEPTORS, HttpInterceptor } from "@angular/common/http";
import { BASE_PATH_DEFAULT, HTTP_INTERCEPTORS_DEFAULT } from "./tokens";
import { DefaultBaseInterceptor } from "./utils/base-interceptor";
import { DateInterceptor } from "./utils/date-transformer";
import { AuthInterceptor } from "./auth/auth.interceptor";
import { API_KEY_TOKEN, BEARER_TOKEN_TOKEN } from "./auth/auth.tokens";

/** Configuration for the Default API client. */
export interface DefaultConfig {
  basePath: string;
  /** If true, automatically transforms ISO date strings in responses to Date objects. Default: true */
  enableDateTransform?: boolean;
  /** An array of custom HttpInterceptor classes to apply to requests for this client. */
  interceptors?: (new (...args: never[]) => HttpInterceptor)[];
  /** The API key to be used for authentication. */
  apiKey?: string;
  /** The Bearer token or a function returning the token for authentication. */
  bearerToken?: string | (() => string);
}

/** Provides the necessary services and configuration for the Default API client. */
export function provideDefaultClient(config: DefaultConfig): EnvironmentProviders {

  const providers: Provider[] = [
    { provide: BASE_PATH_DEFAULT, useValue: config.basePath },
    // The base interceptor is responsible for applying client-specific interceptors.
    { provide: HTTP_INTERCEPTORS, useClass: DefaultBaseInterceptor, multi: true }
  ];


  // Provide the AuthInterceptor to handle adding auth credentials to requests.
  providers.push({
    provide: HTTP_INTERCEPTORS,
    useClass: AuthInterceptor,
    multi: true
  });

  // Provide the API key via the API_KEY_TOKEN if it's configured.
  if (config.apiKey) {
    providers.push({ provide: API_KEY_TOKEN, useValue: config.apiKey });
  }

  // Provide the bearer token via the BEARER_TOKEN_TOKEN if it's configured.
  if (config.bearerToken) {
    providers.push({ provide: BEARER_TOKEN_TOKEN, useValue: config.bearerToken });
  }


  // Instantiate custom interceptors provided by the user.
  const customInterceptors = config.interceptors?.map(InterceptorClass => new InterceptorClass()) || [];

  // Add the date transformer interceptor if enabled. It runs before custom interceptors.
  if (config.enableDateTransform !== false && true) {
    customInterceptors.unshift(new DateInterceptor());
  }

  // Provide a single array of all client-specific interceptors.
  providers.push({
    provide: HTTP_INTERCEPTORS_DEFAULT,
    useValue: customInterceptors
  });

  return makeEnvironmentProviders(providers);
}
