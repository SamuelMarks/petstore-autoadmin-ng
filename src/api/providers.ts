/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated provider functions for easy setup
* Do not edit this file manually
*/
import { EnvironmentProviders, Provider, makeEnvironmentProviders } from "@angular/core";
import { HTTP_INTERCEPTORS, HttpInterceptor } from "@angular/common/http";
import { BASE_PATH_DEFAULT, HTTP_INTERCEPTORS_DEFAULT } from "./tokens";
import { DefaultBaseInterceptor } from "./utils/base-interceptor";
import { DateInterceptor } from "./utils/date-transformer";
import { AuthInterceptor } from "./auth/auth.interceptor";
import { API_KEY_TOKEN } from "./auth/auth.tokens";
import { BEARER_TOKEN_TOKEN } from "./auth/auth.tokens";

export interface DefaultConfig {
    basePath: string;
    enableDateTransform?: boolean;
    interceptors?: (new (...args: any[]) => HttpInterceptor)[];
    apiKey?: string;
    bearerToken?: string | (() => string);
}

export function provideDefaultClient(config: DefaultConfig): EnvironmentProviders {

    const providers: Provider[] = [
        { provide: BASE_PATH_DEFAULT, useValue: config.basePath },
        { provide: HTTP_INTERCEPTORS, useClass: DefaultBaseInterceptor, multi: true }
    ];


    // Provide the AuthInterceptor
    providers.push({
        provide: HTTP_INTERCEPTORS,
        useClass: AuthInterceptor,
        multi: true
    });

    // Provide the API key if present
    if (config.apiKey) {
        providers.push({ provide: API_KEY_TOKEN, useValue: config.apiKey });
    }

    // Provide the Bearer/OAuth2 token if present
    if (config.bearerToken) {
        providers.push({ provide: BEARER_TOKEN_TOKEN, useValue: config.bearerToken });
    }


    const customInterceptors = config.interceptors?.map(InterceptorClass => new InterceptorClass()) || [];

    if (config.enableDateTransform !== false && true) {
        customInterceptors.unshift(new DateInterceptor());
    }

    providers.push({
        provide: HTTP_INTERCEPTORS_DEFAULT,
        useValue: customInterceptors
    });

    return makeEnvironmentProviders(providers);
}
